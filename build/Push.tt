<#@ Template Debug="true" Hostspecific="true" Language="C#" #>
<#@ Output Extension=".ps1" Encoding="ASCII" #>
<#@ Assembly Name="System.Core" #>
<#@ Import Namespace="System.IO" #>
<#@ Import Namespace="System.Collections.Generic" #>
<#@ Import Namespace="System.Linq" #>
<#
var versionExpr = new System.Text.RegularExpressions.Regex(@"\d+.\d+.\d+.\d+");
var currentDir = new DirectoryInfo(this.Host.ResolvePath(""));
var rootFile = "apikey.txt";

// First locate netfx root directory.
var rootDir = TraverseUp(currentDir).FirstOrDefault(d => d.EnumerateFileSystemInfos(rootFile).Any());
if (rootDir == null)
	return LogError("Failed to locate file '" + rootFile + "' from an ancestor folder of '" + currentDir.FullName + "'.", 18, 0);

var apiKeyFile = Path.Combine(rootDir.FullName, "apikey.txt");
if (!File.Exists(apiKeyFile))
	return LogError("Failed to locate file '" + rootDir + "\\apikey.txt' which should contain your NuGet library API Key.", 22, 0);
            
// Next, locate the NuGet command line package
var packagesDir = rootDir.EnumerateDirectories("packages", SearchOption.AllDirectories).FirstOrDefault();
if (packagesDir == null)
    return LogError("Failed to locate folder 'packages' under the root netfx folder '" + rootDir.FullName + "'.", 26, 0);

var nugetCmd = packagesDir.EnumerateFiles("NuGet.exe", SearchOption.AllDirectories)
        .Where(file => versionExpr.IsMatch(file.FullName))
        .OrderByDescending(file => new Version(versionExpr.Match(file.FullName).Value))
        .FirstOrDefault();
if (nugetCmd == null)
    return LogError("Failed to locate 'NuGet.exe' command tool under the folder '" + packagesDir.FullName + "'.", 30, 0);

var pathToRoot = currentDir.FullName
    .Replace(rootDir.FullName, "")
    .Split(new[] { Path.DirectorySeparatorChar }, StringSplitOptions.RemoveEmptyEntries)
    .Aggregate("", (path, current) => path += "..\\");

var pathToNuGetCmd = pathToRoot + nugetCmd.Directory.FullName.Replace(rootDir.FullName, "").Substring(1);

#>
$apiKey = Get-Content <#= pathToRoot #>apikey.txt
$packageFiles = (Get-ChildItem -Filter *.nupkg -Path Funq.NuGet\bin)
$packageFiles | %{ <#=pathToNuGetCmd #>\NuGet.exe push -source http://packages.nuget.org/v1/ $_.FullName $apiKey }
<#+
    
// Utility methods
IEnumerable<DirectoryInfo> TraverseUp(DirectoryInfo dir)
{
    var current = dir;
    while (current != null)
    {
        yield return current;
        current = current.Parent;
    }
}

string LogError(string message, int line, int column)
{
    this.Host.LogErrors(new System.CodeDom.Compiler.CompilerErrorCollection(new[] 
    {
        new System.CodeDom.Compiler.CompilerError(this.Host.TemplateFile, line, column, "0", message)
    }));
    return "";
}
#>