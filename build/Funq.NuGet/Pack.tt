<#@ Template Debug="true" Hostspecific="true" Language="C#" #>
<#@ Output Extension=".cmd" Encoding="ASCII" #>
<#@ Assembly Name="System.Core" #>
<#@ Import Namespace="System.IO" #>
<#@ Import Namespace="System.Collections.Generic" #>
<#@ Import Namespace="System.Linq" #>
<#
/*
 * This template renders a current-path relative version of the batch file Pack.cmd 
 * that takes into account the location of the currently installed version of NuGet
 * command line tool package.
*/

var versionExpr = new System.Text.RegularExpressions.Regex(@"\d+.\d+.\d+.\d+");
var currentDir = new DirectoryInfo(this.Host.ResolvePath(""));

// First locate netfx root directory.
var rootDir = TraverseUp(currentDir).FirstOrDefault(d => d.EnumerateFileSystemInfos("Funq.NuGet.sln").Any());
if (rootDir == null)
	return LogError("Failed to locate file 'Funq.NuGet.sln' from an ancestor folder of '" + currentDir.FullName + "'.", 12, 0);

// Next, locate the NuGet command line package
var packagesDir = rootDir.EnumerateDirectories("packages").FirstOrDefault();
if (packagesDir == null)
    return LogError("Failed to locate folder 'packages' under the root folder '" + rootDir.FullName + "'.", 17, 0);

var nugetCmd = packagesDir.EnumerateFiles("NuGet.exe", SearchOption.AllDirectories)
        .Where(file => versionExpr.IsMatch(file.FullName))
        .OrderByDescending(file => new Version(versionExpr.Match(file.FullName).Value))
        .FirstOrDefault();
if (nugetCmd == null)
    return LogError("Failed to locate 'NuGet.exe' command tool under the folder '" + packagesDir.FullName + "'.", 24, 0);

var pathToRoot = currentDir.FullName
    .Replace(rootDir.FullName, "")
    .Split(new[] { Path.DirectorySeparatorChar }, StringSplitOptions.RemoveEmptyEntries)
    .Aggregate("", (path, current) => path += "..\\");

var pathToNuGetCmd = pathToRoot + nugetCmd.Directory.FullName.Replace(rootDir.FullName, "").Substring(1);
var pathToPackageBaseDir = "..";
//var pathToPackageBaseDir =
//    nugetCmd.Directory.FullName.Replace(rootDir.FullName, "")
//    .Split(new[] { Path.DirectorySeparatorChar }, StringSplitOptions.RemoveEmptyEntries)
//    .Aggregate("", (path, current) => path += "..\\") +
//    currentDir.FullName.Replace(rootDir.FullName, "").Substring(1) + "\\bin";

#>
pushd bin\NuGet\Funq
..\..\..\\<#= pathToRoot #><#= pathToNuGetCmd #>\NuGet.exe pack Funq.nuspec -OutputDirectory ..\..
popd
pushd bin\NuGet\Funqlet
..\..\..\\<#= pathToRoot #><#= pathToNuGetCmd #>\NuGet.exe pack Funqlet.nuspec -OutputDirectory ..\..
popd
<#+
    
// Utility methods
IEnumerable<DirectoryInfo> TraverseUp(DirectoryInfo dir)
{
    var current = dir;
    while (current != null)
    {
        yield return current;
        current = current.Parent;
    }
}

string LogError(string message, int line, int column)
{
    this.Host.LogErrors(new System.CodeDom.Compiler.CompilerErrorCollection(new[] 
    {
        new System.CodeDom.Compiler.CompilerError(this.Host.TemplateFile, line, column, "0", message)
    }));
    return "";
}
#>