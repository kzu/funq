<#@ Template Debug="false" HostSpecific="false" Language="C#" #>
<#@ Output Extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Import Namespace="System.Linq" #>
<#@ Include File="..\Header.tt" #>

#if NET20
using System.Diagnostics.CodeAnalysis;

namespace System
{
<#
for (var typeCount = 1; typeCount <= 4; typeCount++)
{
    var typeList = GetGenericList(typeCount, "T{0}");
    var argumentList = GetGenericList(typeCount, "T{0} arg{0}");
#>
	/// <summary>
	/// Encapsulates a method that has <#=ConvertToWord(typeCount) #> parameters and does not return a value.
	/// </summary>
<#
for (var typeIndex = 1; typeIndex <= typeCount; typeIndex++)
{
#>
	/// <typeparam name="T<#=typeIndex #>">The type of the <#=ConvertToOrdinal(typeIndex) #> parameter of the method that this delegate encapsulates.</typeparam>
<#
}

for (var typeIndex = 1; typeIndex <= typeCount; typeIndex++)
{
#>
	/// <param name="arg<#=typeIndex #>">The <#=ConvertToOrdinal(typeIndex) #> parameter of the method that this delegate encapsulates.</param>
<#
}
#>
	[SuppressMessage("Microsoft.Design", "CA1005:AvoidExcessiveParametersOnGenericTypes", Justification = "The number of type parameters is necessary to provide the desired behavior.")]
	public delegate void Action<<#=typeList #>>(<#=argumentList #>);

	/// <summary>
	/// Encapsulates a method that has <#=ConvertToWord(typeCount) #> parameters and returns a value of the type specified by the <typeparamref name="TResult" /> parameter.
	/// </summary>
<#
for (var typeIndex = 1; typeIndex <= typeCount; typeIndex++)
{
#>
	/// <typeparam name="T<#=typeIndex #>">The type of the <#=ConvertToOrdinal(typeIndex) #> parameter of the method that this delegate encapsulates.</typeparam>
<#
}
#>
	/// <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
<#
for (var typeIndex = 1; typeIndex <= typeCount; typeIndex++)
{
#>
	/// <param name="arg<#=typeIndex #>">The <#=ConvertToOrdinal(typeIndex) #> parameter of the method that this delegate encapsulates.</param>
<#
}
#>
	/// <return>The return value of the method that this delegate encapsulates.</return>
	[SuppressMessage("Microsoft.Design", "CA1005:AvoidExcessiveParametersOnGenericTypes", Justification = "The number of type parameters is necessary to provide the desired behavior.")]
	public delegate TResult Func<<#=typeList #>, TResult>(<#=argumentList #>);

<#
}
#>
}
#endif
<#@ Include File="..\Helpers.tt" #>